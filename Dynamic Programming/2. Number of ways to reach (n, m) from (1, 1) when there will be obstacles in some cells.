You are given a n x m grid board. You have to find number of ways to reach (n, m) from (1, 1). In one move you can move to (i, j+1) as well as (i+1, j). Or in one move you can go
to right or down. But there are some cells with obstacles you cannot visit those cells. If gridi,j=1 it means this cell has obstacle. 
Problem : https://leetcode.com/problems/unique-paths-ii/



// ============================================================================ //
// ||                                                                        || //
// ||             International University of Business Agriculture           || //
// ||                    and Technology, DHaka, Bangladesh                   || //
// ||                           Emrul Hasan Emon                             || //
// ||                                                                        || //
// ============================================================================ //


///              B I S M I L L A H I R  R A H M A N I R  R A H I M


#include<bits/stdc++.h>
#include<vector>
#include<set>
#include<map>
#include<queue>
using namespace std;
typedef bool                      boo;
typedef int                       li;
typedef long long int             ll;
typedef unsigned long long int    l1;
typedef double                    db;

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

typedef vector < li >                   vli;
typedef vector < ll >                   vll;
typedef set < li >                      sli;
typedef set < ll >                      sll;
typedef pair < li, li >                pli;
typedef pair < ll, ll >                pll;
typedef map < li,li >                  mli;
typedef map < ll,ll >                  mll;
typedef vector < pair < li, li > >     vpi;
typedef vector < pair < ll, ll > >     vpl;

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define tc                        int t;cin>>t;while(t--)
#define inp_i(a,n)                for(i=0; i<n ;i++) cin>>a[i]
#define out_i(a, b, c)            for(i=b; i<c; i++) cout<<a[i] spc; cout nl;
#define lp(i,a,b)                 for(i=a;i<b;i++)
#define len(z)                    z.begin(),z.end()
#define faster                    ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);
#define input_txt                 freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define nl                        <<"\n"
#define spc                       <<" "
#define sp                        <<" "<<
#define co(x)                     cout<<x nl
#define sz(a)                     a.size()
#define cy                        cout<<"YES" nl
#define cn                        cout<<"NO" nl
#define pb                        push_back
#define F                         first
#define S                         second
#define pi                        2*acos(0.0)
#define clr(z)                    z.clear()
#define rn                        return
#define gcd(a,b)                  __gcd(a,b)
#define mem(b,z)                  memset(b,z,sizeof(b))
#define fixed(x)                  fixed<<setprecision(x)

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const int lx=1e6+123;
const ll mod = 1000000007;

void solve()
{
    long long int n, m, i, j;
    cin>>n>>m;
    long long a[n+5][m+5], obstacleGrid[n+5][m+5];

    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            cin>>obstacleGrid[i][j];
        }
    }

    memset(a, 0, sizeof(a));  // Every Element of a will be zero

    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            if(i==1)
            {
                if(obstacleGrid[i][j]==1)
                    break;
                a[i][j]=a[i+1][j]=1;
            }
            else
            {
                if(obstacleGrid[i][j]==1)
                {
                    a[i][j]=0;
                    continue;
                }
                a[i][j+1]+=a[i][j];
                a[i+1][j]+=a[i][j];
            }
        }
    }

    cout<<a[n][m]<<endl;
}

void init_code()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
}

int main()
{
    faster
    //  init_code();
    solve();
// A L H A M D U L I L L A H
// 1 2 3 2 1
}
