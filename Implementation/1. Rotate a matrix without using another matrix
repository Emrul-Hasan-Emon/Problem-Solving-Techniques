The problem is we are given a matrix or 2D array. We can rotate it 90 degree for once and then we have to show the result. And another thing is we cannot use another 2D array.
For example:
1 2 3
4 5 6
7 8 9

Answer:
7 4 1
8 5 2
9 6 3

It means first row becmes last, second row become second last.
It is a good observation problem. In this, problem we have to work with four integers every time.
Problem link- https://leetcode.com/problems/rotate-image/

// ============================================================================ //
// ||                                                                        || //
// ||             International University of Business Agriculture           || //
// ||                    and Technology, DHaka, Bangladesh                   || //
// ||                           Emrul Hasan Emon                             || //
// ||                                                                        || //
// ============================================================================ //


///              B I S M I L L A H I R  R A H M A N I R  R A H I M


#include<bits/stdc++.h>
#include<vector>
#include<set>
#include<map>
#include<queue>
using namespace std;
typedef bool                      boo;
typedef int                       li;
typedef long long int             ll;
typedef unsigned long long int    l1;
typedef double                    db;

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

typedef vector < li >                   vli;
typedef vector < ll >                   vll;
typedef set < li >                      sli;
typedef set < ll >                      sll;
typedef pair < li, li >                pli;
typedef pair < ll, ll >                pll;
typedef map < li,li >                  mli;
typedef map < ll,ll >                  mll;
typedef vector < pair < li, li > >     vpi;
typedef vector < pair < ll, ll > >     vpl;

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define tc                        int t;cin>>t;while(t--)
#define inp_i(a,n)                for(i=0; i<n ;i++) cin>>a[i]
#define out_i(a, b, c)            for(i=b; i<c; i++) cout<<a[i] spc; cout nl;
#define lp(i,a,b)                 for(i=a;i<b;i++)
#define len(z)                    z.begin(),z.end()
#define faster                    ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);
#define input_txt                 freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define nl                        <<"\n"
#define spc                       <<" "
#define sp                        <<" "<<
#define co(x)                     cout<<x nl
#define sz(a)                     a.size()
#define cy                        cout<<"YES" nl
#define cn                        cout<<"NO" nl
#define pb                        push_back
#define F                         first
#define S                         second
#define pi                        2*acos(0.0)
#define clr(z)                    z.clear()
#define rn                        return
#define gcd(a,b)                  __gcd(a,b)
#define mem(b,z)                  memset(b,z,sizeof(b))
#define fixed(x)                  fixed<<setprecision(x)

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const int lx=1e6+123;
const ll mod = 1000000007;

void solve()
{
    int i, j, n, m, i1, j1, i2, j2, k, l;
    cin>>n;

    int a[n][n];
    for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        {
            cin>>a[i][j];
        }
    }

    for(i=0, j=0; i<n and j<n; i++, j++)
    {
        for(i1=i, i2=n-i-1, j1=j, j2=n-j-1; i2>i; i1++, i2--, j1++, j2--)
        {
            swap(a[i][j1], a[i2][j]);
            swap(a[i2][j], a[n-i-1][j2]);
            swap(a[n-i-1][j2], a[i1][n-j-1]);
        }

    }
    for(k=0; k<n; k++)
    {
        for(l=0; l<n; l++)
            cout<<a[k][l] spc;
        cout nl;
    }

    cout nl;

}

void init_code()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
}

int main()
{
    faster
    //  init_code();
    solve();
// A L H A M D U L I L L A H
// 1 2 3 2 1
}

Another problem is of same type. But that problem tells whether we can make matrix1 is equal to matrix 2 by rotating matrix1 90 degres several times.
Problem link- https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/
